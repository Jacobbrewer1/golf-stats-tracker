// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	usql "github.com/Jacobbrewer1/golf-stats-tracker/pkg/utils/sql"
	"github.com/prometheus/client_golang/prometheus"
)

// User represents a row from 'user'.
type User struct {
	Id        int           `db:"id,autoinc,pk"`
	Name      string        `db:"name"`
	Username  string        `db:"username"`
	Password  string        `db:"password"`
	LastLogin usql.NullTime `db:"last_login"`
}

// UserColumns is the sorted column names for the type User
var UserColumns = []string{"Id", "LastLogin", "Name", "Password", "Username"}

// Insert inserts the User to the database.
func (m *User) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_User"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO user (" +
		"`name`, `username`, `password`, `last_login`" +
		") VALUES (" +
		"?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.Name, m.Username, m.Password, m.LastLogin)
	res, err := db.Exec(sqlstr, m.Name, m.Username, m.Password, m.LastLogin)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyUsers(db DB, ms ...*User) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_User"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO user (" +
		"`name`,`username`,`password`,`last_login`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?" +
			"),"
		args = append(args, m.Name, m.Username, m.Password, m.LastLogin)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *User) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the User in the database.
func (m *User) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_User"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE user " +
		"SET `name` = ?, `username` = ?, `password` = ?, `last_login` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.Name, m.Username, m.Password, m.LastLogin, m.Id)
	res, err := db.Exec(sqlstr, m.Name, m.Username, m.Password, m.LastLogin, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the User to the database, and tries to update
// on unique constraint violations.
func (m *User) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_User"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO user (" +
		"`name`, `username`, `password`, `last_login`" +
		") VALUES (" +
		"?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`name` = VALUES(`name`), `username` = VALUES(`username`), `password` = VALUES(`password`), `last_login` = VALUES(`last_login`)"

	DBLog(sqlstr, m.Name, m.Username, m.Password, m.LastLogin)
	res, err := db.Exec(sqlstr, m.Name, m.Username, m.Password, m.LastLogin)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the User to the database.
func (m *User) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the User to the database, but tries to update
// on unique constraint violations.
func (m *User) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the User from the database.
func (m *User) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_User"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM user WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// UserById retrieves a row from 'user' as a User.
//
// Generated from primary key.
func UserById(db DB, id int) (*User, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_User"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `name`, `username`, `password`, `last_login` " +
		"FROM user " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m User
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}
