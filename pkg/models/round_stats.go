// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

// RoundStats represents a row from 'round_stats'.
type RoundStats struct {
	Id             int     `db:"id,autoinc,pk"`
	RoundId        int     `db:"round_id"`
	AvgFairwaysHit float64 `db:"avg_fairways_hit"`
	AvgGreensHit   float64 `db:"avg_greens_hit"`
	AvgPutts       float64 `db:"avg_putts"`
	Penalties      int     `db:"penalties"`
	AvgPar3        float64 `db:"avg_par_3"`
	AvgPar4        float64 `db:"avg_par_4"`
	AvgPar5        float64 `db:"avg_par_5"`
}

// RoundStatsColumns is the sorted column names for the type RoundStats
var RoundStatsColumns = []string{"AvgFairwaysHit", "AvgGreensHit", "AvgPar3", "AvgPar4", "AvgPar5", "AvgPutts", "Id", "Penalties", "RoundId"}

// Insert inserts the RoundStats to the database.
func (m *RoundStats) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_RoundStats"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO round_stats (" +
		"`round_id`, `avg_fairways_hit`, `avg_greens_hit`, `avg_putts`, `penalties`, `avg_par_3`, `avg_par_4`, `avg_par_5`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.RoundId, m.AvgFairwaysHit, m.AvgGreensHit, m.AvgPutts, m.Penalties, m.AvgPar3, m.AvgPar4, m.AvgPar5)
	res, err := db.Exec(sqlstr, m.RoundId, m.AvgFairwaysHit, m.AvgGreensHit, m.AvgPutts, m.Penalties, m.AvgPar3, m.AvgPar4, m.AvgPar5)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyRoundStatss(db DB, ms ...*RoundStats) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_RoundStats"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO round_stats (" +
		"`round_id`,`avg_fairways_hit`,`avg_greens_hit`,`avg_putts`,`penalties`,`avg_par_3`,`avg_par_4`,`avg_par_5`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?,?,?,?,?" +
			"),"
		args = append(args, m.RoundId, m.AvgFairwaysHit, m.AvgGreensHit, m.AvgPutts, m.Penalties, m.AvgPar3, m.AvgPar4, m.AvgPar5)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *RoundStats) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the RoundStats in the database.
func (m *RoundStats) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_RoundStats"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE round_stats " +
		"SET `round_id` = ?, `avg_fairways_hit` = ?, `avg_greens_hit` = ?, `avg_putts` = ?, `penalties` = ?, `avg_par_3` = ?, `avg_par_4` = ?, `avg_par_5` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.RoundId, m.AvgFairwaysHit, m.AvgGreensHit, m.AvgPutts, m.Penalties, m.AvgPar3, m.AvgPar4, m.AvgPar5, m.Id)
	res, err := db.Exec(sqlstr, m.RoundId, m.AvgFairwaysHit, m.AvgGreensHit, m.AvgPutts, m.Penalties, m.AvgPar3, m.AvgPar4, m.AvgPar5, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the RoundStats to the database, and tries to update
// on unique constraint violations.
func (m *RoundStats) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_RoundStats"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO round_stats (" +
		"`round_id`, `avg_fairways_hit`, `avg_greens_hit`, `avg_putts`, `penalties`, `avg_par_3`, `avg_par_4`, `avg_par_5`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`round_id` = VALUES(`round_id`), `avg_fairways_hit` = VALUES(`avg_fairways_hit`), `avg_greens_hit` = VALUES(`avg_greens_hit`), `avg_putts` = VALUES(`avg_putts`), `penalties` = VALUES(`penalties`), `avg_par_3` = VALUES(`avg_par_3`), `avg_par_4` = VALUES(`avg_par_4`), `avg_par_5` = VALUES(`avg_par_5`)"

	DBLog(sqlstr, m.RoundId, m.AvgFairwaysHit, m.AvgGreensHit, m.AvgPutts, m.Penalties, m.AvgPar3, m.AvgPar4, m.AvgPar5)
	res, err := db.Exec(sqlstr, m.RoundId, m.AvgFairwaysHit, m.AvgGreensHit, m.AvgPutts, m.Penalties, m.AvgPar3, m.AvgPar4, m.AvgPar5)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the RoundStats to the database.
func (m *RoundStats) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the RoundStats to the database, but tries to update
// on unique constraint violations.
func (m *RoundStats) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the RoundStats from the database.
func (m *RoundStats) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_RoundStats"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM round_stats WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// RoundStatsById retrieves a row from 'round_stats' as a RoundStats.
//
// Generated from primary key.
func RoundStatsById(db DB, id int) (*RoundStats, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_RoundStats"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `round_id`, `avg_fairways_hit`, `avg_greens_hit`, `avg_putts`, `penalties`, `avg_par_3`, `avg_par_4`, `avg_par_5` " +
		"FROM round_stats " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m RoundStats
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetRound Gets an instance of Round
//
// Generated from constraint round_stats_round_id_fk
func (m *RoundStats) GetRound(db DB) (*Round, error) {
	return RoundById(db, m.RoundId)
}
