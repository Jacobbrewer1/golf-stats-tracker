// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

// Club represents a row from 'club'.
type Club struct {
	Id         int    `db:"id,autoinc,pk"`
	Name       string `db:"name"`
	Address1   string `db:"address1"`
	Address2   string `db:"address2"`
	Address3   string `db:"address3"`
	Address4   string `db:"address4"`
	PostalCode string `db:"postal_code"`
}

// ClubColumns is the sorted column names for the type Club
var ClubColumns = []string{"Address1", "Address2", "Address3", "Address4", "Id", "Name", "PostalCode"}

// Insert inserts the Club to the database.
func (m *Club) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Club"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO club (" +
		"`name`, `address1`, `address2`, `address3`, `address4`, `postal_code`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.Name, m.Address1, m.Address2, m.Address3, m.Address4, m.PostalCode)
	res, err := db.Exec(sqlstr, m.Name, m.Address1, m.Address2, m.Address3, m.Address4, m.PostalCode)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyClubs(db DB, ms ...*Club) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Club"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO club (" +
		"`name`,`address1`,`address2`,`address3`,`address4`,`postal_code`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?,?,?" +
			"),"
		args = append(args, m.Name, m.Address1, m.Address2, m.Address3, m.Address4, m.PostalCode)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Club) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Club in the database.
func (m *Club) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_Club"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE club " +
		"SET `name` = ?, `address1` = ?, `address2` = ?, `address3` = ?, `address4` = ?, `postal_code` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.Name, m.Address1, m.Address2, m.Address3, m.Address4, m.PostalCode, m.Id)
	res, err := db.Exec(sqlstr, m.Name, m.Address1, m.Address2, m.Address3, m.Address4, m.PostalCode, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the Club to the database, and tries to update
// on unique constraint violations.
func (m *Club) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_Club"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO club (" +
		"`name`, `address1`, `address2`, `address3`, `address4`, `postal_code`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`name` = VALUES(`name`), `address1` = VALUES(`address1`), `address2` = VALUES(`address2`), `address3` = VALUES(`address3`), `address4` = VALUES(`address4`), `postal_code` = VALUES(`postal_code`)"

	DBLog(sqlstr, m.Name, m.Address1, m.Address2, m.Address3, m.Address4, m.PostalCode)
	res, err := db.Exec(sqlstr, m.Name, m.Address1, m.Address2, m.Address3, m.Address4, m.PostalCode)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Club to the database.
func (m *Club) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Club to the database, but tries to update
// on unique constraint violations.
func (m *Club) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Club from the database.
func (m *Club) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Club"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM club WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// ClubById retrieves a row from 'club' as a Club.
//
// Generated from primary key.
func ClubById(db DB, id int) (*Club, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Club"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `name`, `address1`, `address2`, `address3`, `address4`, `postal_code` " +
		"FROM club " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Club
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}
