// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"github.com/prometheus/client_golang/prometheus"
)

// Hole represents a row from 'hole'.
type Hole struct {
	Id              int `db:"id,autoinc,pk"`
	CourseDetailsId int `db:"course_details_id"`
	Number          int `db:"number"`
	Par             int `db:"par"`
	Stroke          int `db:"stroke"`
	DistanceYards   int `db:"distance_yards"`
	DistanceMeters  int `db:"distance_meters"`
}

// HoleColumns is the sorted column names for the type Hole
var HoleColumns = []string{"CourseDetailsId", "DistanceMeters", "DistanceYards", "Id", "Number", "Par", "Stroke"}

// Insert inserts the Hole to the database.
func (m *Hole) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Hole"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO hole (" +
		"`course_details_id`, `number`, `par`, `stroke`, `distance_yards`, `distance_meters`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.CourseDetailsId, m.Number, m.Par, m.Stroke, m.DistanceYards, m.DistanceMeters)
	res, err := db.Exec(sqlstr, m.CourseDetailsId, m.Number, m.Par, m.Stroke, m.DistanceYards, m.DistanceMeters)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyHoles(db DB, ms ...*Hole) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Hole"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO hole (" +
		"`course_details_id`,`number`,`par`,`stroke`,`distance_yards`,`distance_meters`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?,?,?" +
			"),"
		args = append(args, m.CourseDetailsId, m.Number, m.Par, m.Stroke, m.DistanceYards, m.DistanceMeters)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Hole) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Hole in the database.
func (m *Hole) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_Hole"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE hole " +
		"SET `course_details_id` = ?, `number` = ?, `par` = ?, `stroke` = ?, `distance_yards` = ?, `distance_meters` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.CourseDetailsId, m.Number, m.Par, m.Stroke, m.DistanceYards, m.DistanceMeters, m.Id)
	res, err := db.Exec(sqlstr, m.CourseDetailsId, m.Number, m.Par, m.Stroke, m.DistanceYards, m.DistanceMeters, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the Hole to the database, and tries to update
// on unique constraint violations.
func (m *Hole) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_Hole"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO hole (" +
		"`course_details_id`, `number`, `par`, `stroke`, `distance_yards`, `distance_meters`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`course_details_id` = VALUES(`course_details_id`), `number` = VALUES(`number`), `par` = VALUES(`par`), `stroke` = VALUES(`stroke`), `distance_yards` = VALUES(`distance_yards`), `distance_meters` = VALUES(`distance_meters`)"

	DBLog(sqlstr, m.CourseDetailsId, m.Number, m.Par, m.Stroke, m.DistanceYards, m.DistanceMeters)
	res, err := db.Exec(sqlstr, m.CourseDetailsId, m.Number, m.Par, m.Stroke, m.DistanceYards, m.DistanceMeters)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Hole to the database.
func (m *Hole) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Hole to the database, but tries to update
// on unique constraint violations.
func (m *Hole) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Hole from the database.
func (m *Hole) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Hole"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM hole WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// HoleById retrieves a row from 'hole' as a Hole.
//
// Generated from primary key.
func HoleById(db DB, id int) (*Hole, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Hole"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `course_details_id`, `number`, `par`, `stroke`, `distance_yards`, `distance_meters` " +
		"FROM hole " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Hole
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetCourseDetails Gets an instance of CourseDetails
//
// Generated from constraint hole_course_details_id_fk
func (m *Hole) GetCourseDetails(db DB) (*CourseDetails, error) {
	return CourseDetailsById(db, m.CourseDetailsId)
}
