// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	usql "github.com/Jacobbrewer1/golf-stats-tracker/pkg/utils/sql"
	"github.com/prometheus/client_golang/prometheus"
)

// CourseDetails represents a row from 'course_details'.
type CourseDetails struct {
	Id              int             `db:"id,autoinc,pk"`
	CourseId        int             `db:"course_id"`
	Marker          usql.NullString `db:"marker"`
	Slope           int             `db:"slope"`
	CourseRating    float64         `db:"course_rating"`
	FrontNinePar    int             `db:"front_nine_par"`
	BackNinePar     int             `db:"back_nine_par"`
	TotalPar        int             `db:"total_par"`
	FrontNineYards  int             `db:"front_nine_yards"`
	BackNineYards   int             `db:"back_nine_yards"`
	TotalYards      int             `db:"total_yards"`
	FrontNineMeters int             `db:"front_nine_meters"`
	BackNineMeters  int             `db:"back_nine_meters"`
	TotalMeters     int             `db:"total_meters"`
}

// CourseDetailsColumns is the sorted column names for the type CourseDetails
var CourseDetailsColumns = []string{"BackNineMeters", "BackNinePar", "BackNineYards", "CourseId", "CourseRating", "FrontNineMeters", "FrontNinePar", "FrontNineYards", "Id", "Marker", "Slope", "TotalMeters", "TotalPar", "TotalYards"}

// Insert inserts the CourseDetails to the database.
func (m *CourseDetails) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_CourseDetails"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO course_details (" +
		"`course_id`, `marker`, `slope`, `course_rating`, `front_nine_par`, `back_nine_par`, `total_par`, `front_nine_yards`, `back_nine_yards`, `total_yards`, `front_nine_meters`, `back_nine_meters`, `total_meters`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.CourseId, m.Marker, m.Slope, m.CourseRating, m.FrontNinePar, m.BackNinePar, m.TotalPar, m.FrontNineYards, m.BackNineYards, m.TotalYards, m.FrontNineMeters, m.BackNineMeters, m.TotalMeters)
	res, err := db.Exec(sqlstr, m.CourseId, m.Marker, m.Slope, m.CourseRating, m.FrontNinePar, m.BackNinePar, m.TotalPar, m.FrontNineYards, m.BackNineYards, m.TotalYards, m.FrontNineMeters, m.BackNineMeters, m.TotalMeters)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyCourseDetailss(db DB, ms ...*CourseDetails) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_CourseDetails"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO course_details (" +
		"`course_id`,`marker`,`slope`,`course_rating`,`front_nine_par`,`back_nine_par`,`total_par`,`front_nine_yards`,`back_nine_yards`,`total_yards`,`front_nine_meters`,`back_nine_meters`,`total_meters`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?,?,?,?,?,?,?,?,?,?" +
			"),"
		args = append(args, m.CourseId, m.Marker, m.Slope, m.CourseRating, m.FrontNinePar, m.BackNinePar, m.TotalPar, m.FrontNineYards, m.BackNineYards, m.TotalYards, m.FrontNineMeters, m.BackNineMeters, m.TotalMeters)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *CourseDetails) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the CourseDetails in the database.
func (m *CourseDetails) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_CourseDetails"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE course_details " +
		"SET `course_id` = ?, `marker` = ?, `slope` = ?, `course_rating` = ?, `front_nine_par` = ?, `back_nine_par` = ?, `total_par` = ?, `front_nine_yards` = ?, `back_nine_yards` = ?, `total_yards` = ?, `front_nine_meters` = ?, `back_nine_meters` = ?, `total_meters` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.CourseId, m.Marker, m.Slope, m.CourseRating, m.FrontNinePar, m.BackNinePar, m.TotalPar, m.FrontNineYards, m.BackNineYards, m.TotalYards, m.FrontNineMeters, m.BackNineMeters, m.TotalMeters, m.Id)
	res, err := db.Exec(sqlstr, m.CourseId, m.Marker, m.Slope, m.CourseRating, m.FrontNinePar, m.BackNinePar, m.TotalPar, m.FrontNineYards, m.BackNineYards, m.TotalYards, m.FrontNineMeters, m.BackNineMeters, m.TotalMeters, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the CourseDetails to the database, and tries to update
// on unique constraint violations.
func (m *CourseDetails) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_CourseDetails"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO course_details (" +
		"`course_id`, `marker`, `slope`, `course_rating`, `front_nine_par`, `back_nine_par`, `total_par`, `front_nine_yards`, `back_nine_yards`, `total_yards`, `front_nine_meters`, `back_nine_meters`, `total_meters`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`course_id` = VALUES(`course_id`), `marker` = VALUES(`marker`), `slope` = VALUES(`slope`), `course_rating` = VALUES(`course_rating`), `front_nine_par` = VALUES(`front_nine_par`), `back_nine_par` = VALUES(`back_nine_par`), `total_par` = VALUES(`total_par`), `front_nine_yards` = VALUES(`front_nine_yards`), `back_nine_yards` = VALUES(`back_nine_yards`), `total_yards` = VALUES(`total_yards`), `front_nine_meters` = VALUES(`front_nine_meters`), `back_nine_meters` = VALUES(`back_nine_meters`), `total_meters` = VALUES(`total_meters`)"

	DBLog(sqlstr, m.CourseId, m.Marker, m.Slope, m.CourseRating, m.FrontNinePar, m.BackNinePar, m.TotalPar, m.FrontNineYards, m.BackNineYards, m.TotalYards, m.FrontNineMeters, m.BackNineMeters, m.TotalMeters)
	res, err := db.Exec(sqlstr, m.CourseId, m.Marker, m.Slope, m.CourseRating, m.FrontNinePar, m.BackNinePar, m.TotalPar, m.FrontNineYards, m.BackNineYards, m.TotalYards, m.FrontNineMeters, m.BackNineMeters, m.TotalMeters)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the CourseDetails to the database.
func (m *CourseDetails) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the CourseDetails to the database, but tries to update
// on unique constraint violations.
func (m *CourseDetails) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the CourseDetails from the database.
func (m *CourseDetails) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_CourseDetails"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM course_details WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// CourseDetailsById retrieves a row from 'course_details' as a CourseDetails.
//
// Generated from primary key.
func CourseDetailsById(db DB, id int) (*CourseDetails, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_CourseDetails"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `course_id`, `marker`, `slope`, `course_rating`, `front_nine_par`, `back_nine_par`, `total_par`, `front_nine_yards`, `back_nine_yards`, `total_yards`, `front_nine_meters`, `back_nine_meters`, `total_meters` " +
		"FROM course_details " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m CourseDetails
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetCourse Gets an instance of Course
//
// Generated from constraint course_details_course_id_fk
func (m *CourseDetails) GetCourse(db DB) (*Course, error) {
	return CourseById(db, m.CourseId)
}
