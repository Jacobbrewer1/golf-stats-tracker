// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	usql "github.com/Jacobbrewer1/golf-stats-tracker/pkg/utils/sql"
	"github.com/prometheus/client_golang/prometheus"
)

// HoleStats represents a row from 'hole_stats'.
type HoleStats struct {
	Id          int       `db:"id,autoinc,pk"`
	HoleId      int       `db:"hole_id"`
	Score       int       `db:"score"`
	FairwayHit  usql.Enum `db:"fairway_hit"`
	GreenHit    usql.Enum `db:"green_hit"`
	PinLocation string    `db:"pin_location"`
	Putts       int       `db:"putts"`
	Penalties   int       `db:"penalties"`
}

// HoleStatsColumns is the sorted column names for the type HoleStats
var HoleStatsColumns = []string{"FairwayHit", "GreenHit", "HoleId", "Id", "Penalties", "PinLocation", "Putts", "Score"}

// Insert inserts the HoleStats to the database.
func (m *HoleStats) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_HoleStats"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO hole_stats (" +
		"`hole_id`, `score`, `fairway_hit`, `green_hit`, `pin_location`, `putts`, `penalties`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.HoleId, m.Score, m.FairwayHit, m.GreenHit, m.PinLocation, m.Putts, m.Penalties)
	res, err := db.Exec(sqlstr, m.HoleId, m.Score, m.FairwayHit, m.GreenHit, m.PinLocation, m.Putts, m.Penalties)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyHoleStatss(db DB, ms ...*HoleStats) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_HoleStats"))
	defer t.ObserveDuration()

	var sqlstr = "INSERT INTO hole_stats (" +
		"`hole_id`,`score`,`fairway_hit`,`green_hit`,`pin_location`,`putts`,`penalties`" +
		") VALUES"

	var args []interface{}
	for _, m := range ms {
		sqlstr += " (" +
			"?,?,?,?,?,?,?" +
			"),"
		args = append(args, m.HoleId, m.Score, m.FairwayHit, m.GreenHit, m.PinLocation, m.Putts, m.Penalties)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *HoleStats) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the HoleStats in the database.
func (m *HoleStats) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_HoleStats"))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE hole_stats " +
		"SET `hole_id` = ?, `score` = ?, `fairway_hit` = ?, `green_hit` = ?, `pin_location` = ?, `putts` = ?, `penalties` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.HoleId, m.Score, m.FairwayHit, m.GreenHit, m.PinLocation, m.Putts, m.Penalties, m.Id)
	res, err := db.Exec(sqlstr, m.HoleId, m.Score, m.FairwayHit, m.GreenHit, m.PinLocation, m.Putts, m.Penalties, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the HoleStats to the database, and tries to update
// on unique constraint violations.
func (m *HoleStats) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_HoleStats"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO hole_stats (" +
		"`hole_id`, `score`, `fairway_hit`, `green_hit`, `pin_location`, `putts`, `penalties`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`hole_id` = VALUES(`hole_id`), `score` = VALUES(`score`), `fairway_hit` = VALUES(`fairway_hit`), `green_hit` = VALUES(`green_hit`), `pin_location` = VALUES(`pin_location`), `putts` = VALUES(`putts`), `penalties` = VALUES(`penalties`)"

	DBLog(sqlstr, m.HoleId, m.Score, m.FairwayHit, m.GreenHit, m.PinLocation, m.Putts, m.Penalties)
	res, err := db.Exec(sqlstr, m.HoleId, m.Score, m.FairwayHit, m.GreenHit, m.PinLocation, m.Putts, m.Penalties)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the HoleStats to the database.
func (m *HoleStats) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the HoleStats to the database, but tries to update
// on unique constraint violations.
func (m *HoleStats) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the HoleStats from the database.
func (m *HoleStats) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_HoleStats"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM hole_stats WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// HoleStatsById retrieves a row from 'hole_stats' as a HoleStats.
//
// Generated from primary key.
func HoleStatsById(db DB, id int) (*HoleStats, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_HoleStats"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `hole_id`, `score`, `fairway_hit`, `green_hit`, `pin_location`, `putts`, `penalties` " +
		"FROM hole_stats " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m HoleStats
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// GetHole Gets an instance of Hole
//
// Generated from constraint hole_stats_hole_id_fk
func (m *HoleStats) GetHole(db DB) (*Hole, error) {
	return HoleById(db, m.HoleId)
}

// Valid values for the 'FairwayHit' enum column
var (
	HoleStatsFairwayHitHIT           = "HIT"
	HoleStatsFairwayHitLEFT          = "LEFT"
	HoleStatsFairwayHitRIGHT         = "RIGHT"
	HoleStatsFairwayHitSHORT         = "SHORT"
	HoleStatsFairwayHitLONG          = "LONG"
	HoleStatsFairwayHitNOTAPPLICABLE = "NOT_APPLICABLE"
)

// Valid values for the 'GreenHit' enum column
var (
	HoleStatsGreenHitHIT   = "HIT"
	HoleStatsGreenHitLEFT  = "LEFT"
	HoleStatsGreenHitRIGHT = "RIGHT"
	HoleStatsGreenHitSHORT = "SHORT"
	HoleStatsGreenHitLONG  = "LONG"
)
